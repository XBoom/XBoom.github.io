<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XBoom Dove</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xboom.github.io/"/>
  <updated>2022-08-14T09:46:21.704Z</updated>
  <id>http://xboom.github.io/</id>
  
  <author>
    <name>XBoom Dove</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-中介模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T09:46:21.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong>中介者模式</strong>是一种行为设计模式， 能让你减少对象之间混乱无序的依赖关系。 该模式会限制对象之间的直接交互， 迫使它们通过一个中介者对象进行合作。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mediator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//CD驱动 对象</span></span><br><span class="line"><span class="keyword">type</span> CDDriver <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CDDriver 读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CDDriver)</span> <span class="title">ReadData</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.Data = <span class="string">"music,image"</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"CDDriver: reading data %s\n"</span>, c.Data)</span><br><span class="line">GetMediatorInstance().changed(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU 对象</span></span><br><span class="line"><span class="keyword">type</span> CPU <span class="keyword">struct</span> &#123;</span><br><span class="line">Video <span class="keyword">string</span></span><br><span class="line">Sound <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU 处理数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CPU)</span> <span class="title">Process</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">sp := strings.Split(data, <span class="string">","</span>)</span><br><span class="line">c.Sound = sp[<span class="number">0</span>]</span><br><span class="line">c.Video = sp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"CPU: split data with Sound %s, Video %s\n"</span>, c.Sound, c.Video)</span><br><span class="line">GetMediatorInstance().changed(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VideoCard 驱动</span></span><br><span class="line"><span class="keyword">type</span> VideoCard <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VideoCard 播放</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *VideoCard)</span> <span class="title">Display</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">v.Data = data</span><br><span class="line">fmt.Printf(<span class="string">"VideoCard: display %s\n"</span>, v.Data)</span><br><span class="line">GetMediatorInstance().changed(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SoundCard 对象</span></span><br><span class="line"><span class="keyword">type</span> SoundCard <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SoundCard 播放</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SoundCard)</span> <span class="title">Play</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">s.Data = data</span><br><span class="line">fmt.Printf(<span class="string">"SoundCard: play %s\n"</span>, s.Data)</span><br><span class="line">GetMediatorInstance().changed(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中介</span></span><br><span class="line"><span class="keyword">type</span> Mediator <span class="keyword">struct</span> &#123;</span><br><span class="line">CD    *CDDriver</span><br><span class="line">CPU   *CPU</span><br><span class="line">Video *VideoCard</span><br><span class="line">Sound *SoundCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediator *Mediator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMediatorInstance</span><span class="params">()</span> *<span class="title">Mediator</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> mediator == <span class="literal">nil</span> &#123;<span class="comment">//单例模式-懒汉模式</span></span><br><span class="line">mediator = &amp;Mediator&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mediator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Mediator)</span> <span class="title">changed</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> inst := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *CDDriver:</span><br><span class="line">m.CPU.Process(inst.Data)</span><br><span class="line"><span class="keyword">case</span> *CPU:</span><br><span class="line">m.Sound.Play(inst.Sound)</span><br><span class="line">m.Video.Display(inst.Video)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mediator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMediator</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">mediator := GetMediatorInstance()</span><br><span class="line">mediator.CD = &amp;CDDriver&#123;&#125;</span><br><span class="line">mediator.CPU = &amp;CPU&#123;&#125;</span><br><span class="line">mediator.Video = &amp;VideoCard&#123;&#125;</span><br><span class="line">mediator.Sound = &amp;SoundCard&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tiggle</span></span><br><span class="line">mediator.CD.ReadData()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mediator.CD.Data != <span class="string">"music,image"</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"CD unexpect data %s"</span>, mediator.CD.Data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mediator.CPU.Sound != <span class="string">"music"</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"CPU unexpect sound data %s"</span>, mediator.CPU.Sound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mediator.CPU.Video != <span class="string">"image"</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"CPU unexpect video data %s"</span>, mediator.CPU.Video)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mediator.Video.Data != <span class="string">"image"</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"VidoeCard unexpect data %s"</span>, mediator.Video.Data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mediator.Sound.Data != <span class="string">"music"</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"SoundCard unexpect data %s"</span>, mediator.Sound.Data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>当一些对象和其他对象紧密耦合以致难以对其进行修改时</li><li>当组件因过于依赖其他组件而无法在不同应用中复用时，可使用中介者模式</li><li>如果为了能在不同情景下复用一些基本行为，导致需要被迫创建大量组件子类时</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ol><li><em>单一职责原则</em>。 可以将多个组件间的交流抽取到同一位置， 使其更易于理解和维护。</li><li><em>开闭原则</em>。 无需修改实际组件就能增加新的中介者</li><li>可以减轻应用中多个组件间的耦合情况。</li><li>可以更方便地复用各个组件。</li></ol><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/mediator" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/mediator</a></li><li><a href="https://lailin.xyz/post/mediator.html" target="_blank" rel="noopener">https://lailin.xyz/post/mediator.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;中介者模式&lt;/strong&gt;是一种行为设计模式， 能让你减少对象之间混乱无序的依赖关系。 该模式会限制对象之间的直接交互， 迫使它们通过一个中介者对象进行合作。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-命令模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T07:39:18.538Z</updated>
    
    <content type="html"><![CDATA[<p><strong>命令模式</strong>是一种行为设计模式， 它可将请求转换为一个包含与请求相关的所有信息的独立对象。 该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中， 且能实现可撤销操作</p><h3 id="实现代码"><a class="markdownIt-Anchor" href="#实现代码"></a> 实现代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> command</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="keyword">type</span> Command <span class="keyword">interface</span> &#123;</span><br><span class="line">Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StartCommand <span class="keyword">struct</span> &#123;</span><br><span class="line">mb *MotherBoard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStartCommand</span><span class="params">(mb *MotherBoard)</span> *<span class="title">StartCommand</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;StartCommand&#123;</span><br><span class="line">mb: mb,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *StartCommand)</span> <span class="title">Execute</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.mb.Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启命令</span></span><br><span class="line"><span class="keyword">type</span> RebootCommand <span class="keyword">struct</span> &#123;</span><br><span class="line">mb *MotherBoard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRebootCommand</span><span class="params">(mb *MotherBoard)</span> *<span class="title">RebootCommand</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;RebootCommand&#123;</span><br><span class="line">mb: mb,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *RebootCommand)</span> <span class="title">Execute</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.mb.Reboot()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MotherBoard <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*MotherBoard)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"system starting\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*MotherBoard)</span> <span class="title">Reboot</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"system rebooting\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Box 包含两个命令</span></span><br><span class="line"><span class="keyword">type</span> Box <span class="keyword">struct</span> &#123;</span><br><span class="line">button1 Command</span><br><span class="line">button2 Command</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBox</span><span class="params">(button1, button2 Command)</span> *<span class="title">Box</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Box&#123;</span><br><span class="line">button1: button1,</span><br><span class="line">button2: button2,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Box)</span> <span class="title">PressButton1</span><span class="params">()</span></span> &#123;</span><br><span class="line">b.button1.Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Box)</span> <span class="title">PressButton2</span><span class="params">()</span></span> &#123;</span><br><span class="line">b.button2.Execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleCommand</span><span class="params">()</span></span> &#123;</span><br><span class="line">mb := &amp;MotherBoard&#123;&#125;</span><br><span class="line">startCommand := NewStartCommand(mb)</span><br><span class="line">rebootCommand := NewRebootCommand(mb)</span><br><span class="line"></span><br><span class="line">box1 := NewBox(startCommand, rebootCommand)</span><br><span class="line">box1.PressButton1()</span><br><span class="line">box1.PressButton2()</span><br><span class="line"></span><br><span class="line">box2 := NewBox(rebootCommand, startCommand)</span><br><span class="line">box2.PressButton1()</span><br><span class="line">box2.PressButton2()</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// system starting</span></span><br><span class="line"><span class="comment">// system rebooting</span></span><br><span class="line"><span class="comment">// system rebooting</span></span><br><span class="line"><span class="comment">// system starting</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>通过操作来参数化对象</li><li>想要将操作放入队列中、操作的执行或者远程执行操作</li><li>想要实现操作回滚功能</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>单一职责原则</em>。 可以解耦触发和执行操作的类</li><li><em>开闭原则</em>。 可以在不修改已有客户端代码的情况下在程序中创建新的命令</li><li>可以实现撤销和恢复功能</li><li>可以实现操作的延迟执行</li><li>可以将一组简单命令组合成一个复杂命令</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/command" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/command</a></li><li><a href="https://lailin.xyz/post/command.html" target="_blank" rel="noopener">https://lailin.xyz/post/command.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;命令模式&lt;/strong&gt;是一种行为设计模式， 它可将请求转换为一个包含与请求相关的所有信息的独立对象。 该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中， 且能实现可撤销操作&lt;/p&gt;
&lt;h3 id=&quot;实现代码&quot;&gt;&lt;a class=&quot;m
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T04:40:41.487Z</updated>
    
    <content type="html"><![CDATA[<p><strong>代理模式</strong> 建议新建一个与原服务对象接口相同的代理类， 然后更新应用以将代理对象传递给所有原始对象客户端。 代理类接收到客户端请求后会创建实际的服务对象， 并将所有工作委派给它。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Subject <span class="keyword">interface</span> &#123;</span><br><span class="line">Do() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RealSubject <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(RealSubject)</span> <span class="title">Do</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"real"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Proxy <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="built_in">real</span> RealSubject</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Proxy)</span> <span class="title">Do</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在调用真实对象之前的工作，检查缓存，判断权限，实例化真实对象等。。</span></span><br><span class="line">res += <span class="string">"pre:"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用真实对象</span></span><br><span class="line">res += p.<span class="built_in">real</span>.Do()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用之后的操作，如缓存结果，对结果进行处理等。。</span></span><br><span class="line">res += <span class="string">":after"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProxy</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sub Subject</span><br><span class="line">sub = &amp;Proxy&#123;&#125;</span><br><span class="line"></span><br><span class="line">res := sub.Do()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res != <span class="string">"pre:real:after"</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li><strong>延迟初始化</strong>， 如果有一个偶尔使用的重量级服务对象，一直保持该对象运行会消耗系统资源时使用代理模式(类似单例模式，但单例模式强调的是单实例)</li><li><strong>访问控制(保护代理)</strong>，如果你只希望特定客户端使用服务对象，这里的对象可以是操作系统中非常重要的部分，而客户端则是各种已启动的程序(包括恶意程序)，此时可使用代理模式</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ol><li>可以在客户端毫无察觉的情况下控制服务对象</li><li>如果客户端对服务对象的生命周期没有特殊要求， 你可以对生命周期进行管理</li><li>即使服务对象还未准备好或不存在， 代理也可以正常工作</li><li>可以在不对服务或客户端做出修改的情况下创建新代理</li><li>代码可能会变得复杂， 因为需要新建许多类。</li><li>服务响应可能会延迟(经过了一层搭理)</li></ol><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://lailin.xyz/post/factory.html" target="_blank" rel="noopener">https://lailin.xyz/post/factory.html</a></li><li><a href="https://refactoringguru.cn/design-patterns/proxy" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/proxy</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt; 建议新建一个与原服务对象接口相同的代理类， 然后更新应用以将代理对象传递给所有原始对象客户端。 代理类接收到客户端请求后会创建实际的服务对象， 并将所有工作委派给它。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T06:51:43.898Z</updated>
    
    <content type="html"><![CDATA[<p><strong>享元模式</strong>是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图片享元工厂</span></span><br><span class="line"><span class="keyword">type</span> ImageFlyweightFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">maps <span class="keyword">map</span>[<span class="keyword">string</span>]*ImageFlyweight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imageFactory *ImageFlyweightFactory</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取图片工厂</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetImageFlyweightFactory</span><span class="params">()</span> *<span class="title">ImageFlyweightFactory</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> imageFactory == <span class="literal">nil</span> &#123;</span><br><span class="line">imageFactory = &amp;ImageFlyweightFactory&#123;</span><br><span class="line">maps: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ImageFlyweight),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> imageFactory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取具体对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *ImageFlyweightFactory)</span> <span class="title">Get</span><span class="params">(filename <span class="keyword">string</span>)</span> *<span class="title">ImageFlyweight</span></span> &#123;</span><br><span class="line">image := f.maps[filename]</span><br><span class="line"><span class="keyword">if</span> image == <span class="literal">nil</span> &#123;</span><br><span class="line">image = NewImageFlyweight(filename)</span><br><span class="line">f.maps[filename] = image</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> image</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">type</span> ImageFlyweight <span class="keyword">struct</span> &#123;</span><br><span class="line">data <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewImageFlyweight</span><span class="params">(filename <span class="keyword">string</span>)</span> *<span class="title">ImageFlyweight</span></span> &#123;</span><br><span class="line"><span class="comment">// Load image file</span></span><br><span class="line">data := fmt.Sprintf(<span class="string">"image data %s"</span>, filename)</span><br><span class="line"><span class="keyword">return</span> &amp;ImageFlyweight&#123;</span><br><span class="line">data: data,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *ImageFlyweight)</span> <span class="title">Data</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> i.data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ImageViewer <span class="keyword">struct</span> &#123;</span><br><span class="line">*ImageFlyweight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewImageViewer</span><span class="params">(filename <span class="keyword">string</span>)</span> *<span class="title">ImageViewer</span></span> &#123;</span><br><span class="line">image := GetImageFlyweightFactory().Get(filename)</span><br><span class="line"><span class="keyword">return</span> &amp;ImageViewer&#123;</span><br><span class="line">ImageFlyweight: image,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *ImageViewer)</span> <span class="title">Display</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Display: %s\n"</span>, i.Data())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleFlyweight</span><span class="params">()</span></span> &#123;</span><br><span class="line">viewer := NewImageViewer(<span class="string">"image1.png"</span>)</span><br><span class="line">viewer.Display()</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Display: image data image1.png</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFlyweight</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">viewer1 := NewImageViewer(<span class="string">"image1.png"</span>)</span><br><span class="line">viewer2 := NewImageViewer(<span class="string">"image1.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> viewer1.ImageFlyweight != viewer2.ImageFlyweight &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ol><li>仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式(类似与内存池，但是这个重复利用的不是分配的内存而是对象)</li></ol><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/flyweight" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/flyweight</a></li><li><a href="https://lailin.xyz/post/flyweight.html" target="_blank" rel="noopener">https://lailin.xyz/post/flyweight.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;享元模式&lt;/strong&gt;是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-备忘录模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T08:23:49.145Z</updated>
    
    <content type="html"><![CDATA[<p><strong>备忘录模式</strong>是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memento</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备忘录 接口</span></span><br><span class="line"><span class="keyword">type</span> Memento <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Game 结构</span></span><br><span class="line"><span class="keyword">type</span> Game <span class="keyword">struct</span> &#123;</span><br><span class="line">hp, mp <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// game 备忘录(拥有相同的接口)</span></span><br><span class="line"><span class="keyword">type</span> gameMemento <span class="keyword">struct</span> &#123;</span><br><span class="line">hp, mp <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Game)</span> <span class="title">Play</span><span class="params">(mpDelta, hpDelta <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">g.mp += mpDelta</span><br><span class="line">g.hp += hpDelta</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回 Game 内部成员</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Game)</span> <span class="title">Save</span><span class="params">()</span> <span class="title">Memento</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;gameMemento&#123;</span><br><span class="line">hp: g.hp,</span><br><span class="line">mp: g.mp,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存 备忘录内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Game)</span> <span class="title">Load</span><span class="params">(m Memento)</span></span> &#123;</span><br><span class="line">gm := m.(*gameMemento)</span><br><span class="line">g.mp = gm.mp</span><br><span class="line">g.hp = gm.hp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Game)</span> <span class="title">Status</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Current HP:%d, MP:%d\n"</span>, g.hp, g.mp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memento</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleGame</span><span class="params">()</span></span> &#123;</span><br><span class="line">game := &amp;Game&#123;</span><br><span class="line">hp: <span class="number">10</span>,</span><br><span class="line">mp: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game.Status()</span><br><span class="line">progress := game.Save()</span><br><span class="line"></span><br><span class="line">game.Play(<span class="number">-2</span>, <span class="number">-3</span>)</span><br><span class="line">game.Status()</span><br><span class="line"></span><br><span class="line">game.Load(progress)</span><br><span class="line">game.Status()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Current HP:10, MP:10</span></span><br><span class="line"><span class="comment">// Current HP:7, MP:8</span></span><br><span class="line"><span class="comment">// Current HP:10, MP:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>当需要创建对象状态快照来恢复其之前的状态时</li><li>当直接访问对象的成员变量、获取器或设置器将导致封装被突破时</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>可以在不破坏对象封装情况的前提下创建对象状态快照</li><li>可以通过让负责人维护原发器状态历史记录来简化原发器代码</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/memento" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/memento</a></li><li><a href="https://lailin.xyz/post/memento.html" target="_blank" rel="noopener">https://lailin.xyz/post/memento.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;备忘录模式&lt;/strong&gt;是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码实现&quot;&gt;&lt;/a&gt; 代码实现&lt;/h3&gt;

      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-概述</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E8%BF%B0/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T12:00:54.601Z</updated>
    
    <content type="html"><![CDATA[<p><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题</p><p>模式根据其目的来分类：</p><ul><li><strong>创建型模式</strong>提供创建对象的机制， 增加已有代码的灵活性和可复用性</li><li><strong>结构型模式</strong>介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效</li><li><strong>行为模式</strong>负责对象间的高效沟通和职责委派</li></ul><h3 id="创建型模式"><a class="markdownIt-Anchor" href="#创建型模式"></a> 创建型模式</h3><ol><li><a href="https://www.yuankang.top/2022/07/19/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">单例模式(Singleton Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/07/19/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/" target="_blank" rel="noopener">简单工厂模式(Simple Factory Pattern)</a></li><li><a href="https://www.yuankang.top/2022/07/19/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">工厂方法模式(Factory Method Pattern)</a></li><li><a href="https://www.yuankang.top/2022/07/19/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/" target="_blank" rel="noopener">抽象工厂模式(Abstract Factory)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">建造者模式(Builder Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">原型模式(Prototype Design Pattern)</a></li></ol><h3 id="结构性模式"><a class="markdownIt-Anchor" href="#结构性模式"></a> 结构性模式</h3><ol><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">代理模式(Proxy Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">桥接模式(Bridge Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">装饰器模式(Decorator Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">适配器模式(Adapter Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">门面模式(Facade Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">组合模式(Composite Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">享元模式(Flyweight Design Pattern)</a></li></ol><h3 id="行为模式"><a class="markdownIt-Anchor" href="#行为模式"></a> 行为模式</h3><ol><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">观察者模式(Observer Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">模板模式(Template Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">策略模式(Strategy Method Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">职责链模式(Chain Of Responsibility Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">状态模式(State  Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">迭代器模式(Iterator Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">访问者模式(Visitor Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">备忘录模式(Memento Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">命令模式(Command Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">解释器模式(Interpreter Design Pattern)</a></li><li><a href="https://www.yuankang.top/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">中介模式(Mediator Design Pattern)</a></li></ol><h3 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h3><ol><li><a href="https://lailin.xyz/post/go-design-pattern.html" target="_blank" rel="noopener">https://lailin.xyz/post/go-design-pattern.html</a></li><li><a href="https://docs.microsoft.com/zh-cn/azure/architecture/patterns/" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/azure/architecture/patterns/</a></li><li><a href="https://github.com/senghoo/golang-design-pattern" target="_blank" rel="noopener">https://github.com/senghoo/golang-design-pattern</a></li><li><a href="https://github.com/mohuishou/go-design-pattern" target="_blank" rel="noopener">https://github.com/mohuishou/go-design-pattern</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;设计模式&lt;/strong&gt;是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题&lt;/p&gt;
&lt;p&gt;模式根据其目的来分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建型模式&lt;/strong&gt;提供创建对
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-模板方法模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T09:41:09.393Z</updated>
    
    <content type="html"><![CDATA[<p><strong>模板方法模式</strong>是一种行为设计模式， 它在超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤</p><p>举个 例子，假设现在要做一个短信推送的系统，那么需要</p><ol><li>检查短信字数是否超过限制</li><li>检查手机号是否正确</li><li>发送短信</li><li>返回状态</li></ol><p>可以发现，在发送短信的时候由于不同的供应商调用的接口不同，所以会有一些实现上的差异，但短信推送的算法（业务逻辑）是固定的</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> templatemethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Downloader <span class="keyword">interface</span> &#123;</span><br><span class="line">Download(uri <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> template <span class="keyword">struct</span> &#123;</span><br><span class="line">implement</span><br><span class="line">uri <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> implement <span class="keyword">interface</span> &#123;</span><br><span class="line">download()</span><br><span class="line">save()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTemplate</span><span class="params">(impl implement)</span> *<span class="title">template</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;template&#123;</span><br><span class="line">implement: impl,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *template)</span> <span class="title">Download</span><span class="params">(uri <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">t.uri = uri</span><br><span class="line">fmt.Print(<span class="string">"prepare downloading\n"</span>)</span><br><span class="line">t.implement.download()</span><br><span class="line">t.implement.save()</span><br><span class="line">fmt.Print(<span class="string">"finish downloading\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *template)</span> <span class="title">save</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"default save\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HTTPDownloader <span class="keyword">struct</span> &#123;</span><br><span class="line">*template</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHTTPDownloader</span><span class="params">()</span> <span class="title">Downloader</span></span> &#123;</span><br><span class="line">downloader := &amp;HTTPDownloader&#123;&#125;</span><br><span class="line">template := newTemplate(downloader)</span><br><span class="line">downloader.template = template</span><br><span class="line"><span class="keyword">return</span> downloader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *HTTPDownloader)</span> <span class="title">download</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"download %s via http\n"</span>, d.uri)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*HTTPDownloader)</span> <span class="title">save</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"http save\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FTPDownloader <span class="keyword">struct</span> &#123;</span><br><span class="line">*template</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFTPDownloader</span><span class="params">()</span> <span class="title">Downloader</span></span> &#123;</span><br><span class="line">downloader := &amp;FTPDownloader&#123;&#125;</span><br><span class="line">template := newTemplate(downloader)</span><br><span class="line">downloader.template = template</span><br><span class="line"><span class="keyword">return</span> downloader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *FTPDownloader)</span> <span class="title">download</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"download %s via ftp\n"</span>, d.uri)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> templatemethod</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleHTTPDownloader</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> downloader Downloader = NewHTTPDownloader()</span><br><span class="line"></span><br><span class="line">downloader.Download(<span class="string">"http://example.com/abc.zip"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// prepare downloading</span></span><br><span class="line"><span class="comment">// download http://example.com/abc.zip via http</span></span><br><span class="line"><span class="comment">// http save</span></span><br><span class="line"><span class="comment">// finish downloading</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleFTPDownloader</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> downloader Downloader = NewFTPDownloader()</span><br><span class="line"></span><br><span class="line">downloader.Download(<span class="string">"ftp://example.com/abc.zip"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// prepare downloading</span></span><br><span class="line"><span class="comment">// download ftp://example.com/abc.zip via ftp</span></span><br><span class="line"><span class="comment">// default save</span></span><br><span class="line"><span class="comment">// finish downloading</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h3><ol><li>模板方法将整个算法转换为一系列独立的步骤， 以便子类能对其进行扩展， 同时还可让超类中所定义的结构保持完整</li><li>在将算法转换为模板方法时， 你可将相似的实现步骤提取到超类中以去除重复代码。 子类间各不同的代码可继续保留在子类中</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ol><li>可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小。</li><li>可将重复代码提取到一个超类中</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;模板方法模式&lt;/strong&gt;是一种行为设计模式， 它在超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤&lt;/p&gt;
&lt;p&gt;举个 例子，假设现在要做一个短信推送的系统，那么需要&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查短信字数是否超过限制&lt;/l
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-桥接模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T05:24:17.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong>桥接模式</strong>是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用。桥接模式类似于策略模式，区别在于策略模式封装一系列算法使得算法可以互相替换。</p><p>策略模式使抽象部分和实现部分分离，可以独立变化。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象消息接口</span></span><br><span class="line"><span class="keyword">type</span> AbstractMessage <span class="keyword">interface</span> &#123;</span><br><span class="line">SendMessage(text, to <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现消息接口</span></span><br><span class="line"><span class="keyword">type</span> MessageImplementer <span class="keyword">interface</span> &#123;</span><br><span class="line">Send(text, to <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//短信消息</span></span><br><span class="line"><span class="keyword">type</span> MessageSMS <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//虚拟短信消息接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ViaSMS</span><span class="params">()</span> <span class="title">MessageImplementer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MessageSMS&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//短信消息实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*MessageSMS)</span> <span class="title">Send</span><span class="params">(text, to <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"send %s to %s via SMS"</span>, text, to)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邮件消息</span></span><br><span class="line"><span class="keyword">type</span> MessageEmail <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//虚拟邮件消息接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ViaEmail</span><span class="params">()</span> <span class="title">MessageImplementer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MessageEmail&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邮件消息实现短信接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*MessageEmail)</span> <span class="title">Send</span><span class="params">(text, to <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"send %s to %s via Email"</span>, text, to)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共消息</span></span><br><span class="line"><span class="keyword">type</span> CommonMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">method MessageImplementer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCommonMessage</span><span class="params">(method MessageImplementer)</span> *<span class="title">CommonMessage</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;CommonMessage&#123;</span><br><span class="line">method: method,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *CommonMessage)</span> <span class="title">SendMessage</span><span class="params">(text, to <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">m.method.Send(text, to)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//紧急消息</span></span><br><span class="line"><span class="keyword">type</span> UrgencyMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">method MessageImplementer<span class="comment">//消息接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUrgencyMessage</span><span class="params">(method MessageImplementer)</span> *<span class="title">UrgencyMessage</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;UrgencyMessage&#123;</span><br><span class="line">method: method,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *UrgencyMessage)</span> <span class="title">SendMessage</span><span class="params">(text, to <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">m.method.Send(fmt.Sprintf(<span class="string">"[Urgency] %s"</span>, text), to)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleCommonSMS</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := NewCommonMessage(ViaSMS())</span><br><span class="line">m.SendMessage(<span class="string">"have a drink?"</span>, <span class="string">"bob"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// send have a drink? to bob via SMS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleCommonEmail</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := NewCommonMessage(ViaEmail())</span><br><span class="line">m.SendMessage(<span class="string">"have a drink?"</span>, <span class="string">"bob"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// send have a drink? to bob via Email</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleUrgencySMS</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := NewUrgencyMessage(ViaSMS())</span><br><span class="line">m.SendMessage(<span class="string">"have a drink?"</span>, <span class="string">"bob"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// send [Urgency] have a drink? to bob via SMS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleUrgencyEmail</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := NewUrgencyMessage(ViaEmail())</span><br><span class="line">m.SendMessage(<span class="string">"have a drink?"</span>, <span class="string">"bob"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// send [Urgency] have a drink? to bob via Email</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>想要拆分或重组一个具有多重功能的庞杂类(例如能与多个数据库服务器进行交互的类)，可以使用桥接模式</li><li>希望在几个独立维度上扩展一个类</li><li>需要在运行时切换不同实现方法</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>开闭原则</em>。 你可以新增抽象部分和实现部分， 且它们之间不会相互影响。</li><li><em>单一职责原则</em>。 抽象部分专注于处理高层逻辑， 实现部分处理平台细节</li><li>对高内聚的类使用该模式可能会让代码更加复杂。</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/bridge" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/bridge</a></li><li><a href="https://lailin.xyz/post/bridge.html" target="_blank" rel="noopener">https://lailin.xyz/post/bridge.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;桥接模式&lt;/strong&gt;是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用。桥接模式类似于策略模式，区别在于策略模式封装一系列算法使得算法可以互相替换。&lt;/p&gt;
&lt;p&gt;策略模式使抽象部分和实现
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-状态模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T09:45:54.367Z</updated>
    
    <content type="html"><![CDATA[<p><strong>状态模式</strong>是一种行为设计模式， 让你能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Week <span class="keyword">interface</span> &#123;</span><br><span class="line">Today()</span><br><span class="line">Next(*DayContext)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DayContext <span class="keyword">struct</span> &#123;</span><br><span class="line">today Week</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDayContext</span><span class="params">()</span> *<span class="title">DayContext</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;DayContext&#123;</span><br><span class="line">today: &amp;Sunday&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DayContext)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">d.today.Today()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DayContext)</span> <span class="title">Next</span><span class="params">()</span></span> &#123;</span><br><span class="line">d.today.Next(d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Sunday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Sunday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Sunday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Sunday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Monday&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Monday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Monday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Monday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Tuesday&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tuesday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Tuesday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Tuesday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Tuesday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Wednesday&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Wednesday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Wednesday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Wednesday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Wednesday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Thursday&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Thursday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Thursday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Thursday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Thursday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Friday&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Friday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Friday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Friday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Friday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Saturday&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Saturday <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Saturday)</span> <span class="title">Today</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Saturday\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Saturday)</span> <span class="title">Next</span><span class="params">(ctx *DayContext)</span></span> &#123;</span><br><span class="line">ctx.today = &amp;Sunday&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleWeek</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := NewDayContext()</span><br><span class="line">todayAndNext := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx.Today()</span><br><span class="line">ctx.Next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">todayAndNext()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Sunday</span></span><br><span class="line"><span class="comment">// Monday</span></span><br><span class="line"><span class="comment">// Tuesday</span></span><br><span class="line"><span class="comment">// Wednesday</span></span><br><span class="line"><span class="comment">// Thursday</span></span><br><span class="line"><span class="comment">// Friday</span></span><br><span class="line"><span class="comment">// Saturday</span></span><br><span class="line"><span class="comment">// Sunday</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>模式建议将所有特定于状态的代码抽取到一组独立的类中。 这样一来可以在独立于其他状态的情况下添加新状态或修改已有状态， 从而减少维护成本</li><li>状态模式会将这些条件语句的分支抽取到相应状态类的方法中。 同时还可以清除主要类中与特定状态相关的临时成员变量和帮手方法代码</li><li>状态模式让你能够生成状态类层次结构， 通过将公用代码抽取到抽象基类中来减少重复</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>单一职责原则</em>。 将与特定状态相关的代码放在单独的类中。</li><li><em>开闭原则</em>。 无需修改已有状态类和上下文就能引入新状态。</li><li>通过消除臃肿的状态机条件语句简化上下文代码。</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/state" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/state</a></li><li><a href="https://lailin.xyz/post/state.html" target="_blank" rel="noopener">https://lailin.xyz/post/state.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;状态模式&lt;/strong&gt;是一种行为设计模式， 让你能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码实现&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T09:14:10.952Z</updated>
    
    <content type="html"><![CDATA[<p><strong>策略模式</strong>是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> strategy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//支付结构体</span></span><br><span class="line"><span class="keyword">type</span> Payment <span class="keyword">struct</span> &#123;</span><br><span class="line">context  *PaymentContext</span><br><span class="line">strategy PaymentStrategy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付上下文</span></span><br><span class="line"><span class="keyword">type</span> PaymentContext <span class="keyword">struct</span> &#123;</span><br><span class="line">Name, CardID <span class="keyword">string</span></span><br><span class="line">Money        <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建新的支付对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPayment</span><span class="params">(name, cardid <span class="keyword">string</span>, money <span class="keyword">int</span>, strategy PaymentStrategy)</span> *<span class="title">Payment</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Payment&#123;</span><br><span class="line">context: &amp;PaymentContext&#123;</span><br><span class="line">Name:   name,</span><br><span class="line">CardID: cardid,</span><br><span class="line">Money:  money,</span><br><span class="line">&#125;,</span><br><span class="line">strategy: strategy,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据策略进行支付</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Payment)</span> <span class="title">Pay</span><span class="params">()</span></span> &#123;</span><br><span class="line">p.strategy.Pay(p.context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PaymentStrategy <span class="keyword">interface</span> &#123;</span><br><span class="line">Pay(*PaymentContext)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cash <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Cash)</span> <span class="title">Pay</span><span class="params">(ctx *PaymentContext)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Pay $%d to %s by cash"</span>, ctx.Money, ctx.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bank <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Bank)</span> <span class="title">Pay</span><span class="params">(ctx *PaymentContext)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Pay $%d to %s by bank account %s"</span>, ctx.Money, ctx.Name, ctx.CardID)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> strategy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExamplePayByCash</span><span class="params">()</span></span> &#123;</span><br><span class="line">payment := NewPayment(<span class="string">"Ada"</span>, <span class="string">""</span>, <span class="number">123</span>, &amp;Cash&#123;&#125;)</span><br><span class="line">payment.Pay()</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Pay $123 to Ada by cash</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExamplePayByBank</span><span class="params">()</span></span> &#123;</span><br><span class="line">payment := NewPayment(<span class="string">"Bob"</span>, <span class="string">"0002"</span>, <span class="number">888</span>, &amp;Bank&#123;&#125;)</span><br><span class="line">payment.Pay()</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Pay $888 to Bob by bank account 0002</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>当想使用对象中各种不同的算法变体，并希望能在运行时切换算法时</li><li>当有许多仅在执行某些行为时略有不同的相似类时</li><li>如果算法在上下文的逻辑中不是特别重要，使用该模式能将类的业务逻辑与其算法实现细节隔离开来</li><li>当类中使用了复杂条件运算符以在同一算法的不同变体中切换时</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>可以在运行时切换对象内的算法。</li><li>可以将算法的实现和使用算法的代码隔离开来。</li><li>可以使用组合来代替继承。</li><li><em>开闭原则</em>。 无需对上下文进行修改就能够引入新的策略</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/strategy" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/strategy</a></li><li><a href="https://lailin.xyz/post/strategy.html" target="_blank" rel="noopener">https://lailin.xyz/post/strategy.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;策略模式&lt;/strong&gt;是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码实现&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-组合模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T10:02:10.763Z</updated>
    
    <content type="html"><![CDATA[<p><strong>组合模式</strong>是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们</p><h3 id="实现代码"><a class="markdownIt-Anchor" href="#实现代码"></a> 实现代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> composite</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line">Parent() Component</span><br><span class="line">SetParent(Component)</span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line">SetName(<span class="keyword">string</span>)</span><br><span class="line">AddChild(Component)</span><br><span class="line">Print(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">LeafNode = <span class="literal">iota</span></span><br><span class="line">CompositeNode</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewComponent</span><span class="params">(kind <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> <span class="title">Component</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c Component</span><br><span class="line"><span class="keyword">switch</span> kind &#123;</span><br><span class="line"><span class="keyword">case</span> LeafNode:</span><br><span class="line">c = NewLeaf()</span><br><span class="line"><span class="keyword">case</span> CompositeNode:</span><br><span class="line">c = NewComposite()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.SetName(name)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> component <span class="keyword">struct</span> &#123;</span><br><span class="line">parent Component</span><br><span class="line">name   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *component)</span> <span class="title">Parent</span><span class="params">()</span> <span class="title">Component</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *component)</span> <span class="title">SetParent</span><span class="params">(parent Component)</span></span> &#123;</span><br><span class="line">c.parent = parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *component)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *component)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">c.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *component)</span> <span class="title">AddChild</span><span class="params">(Component)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *component)</span> <span class="title">Print</span><span class="params">(<span class="keyword">string</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Leaf <span class="keyword">struct</span> &#123;</span><br><span class="line">component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLeaf</span><span class="params">()</span> *<span class="title">Leaf</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Leaf&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Leaf)</span> <span class="title">Print</span><span class="params">(pre <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s-%s\n"</span>, pre, c.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Composite <span class="keyword">struct</span> &#123;</span><br><span class="line">component</span><br><span class="line">childs []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewComposite</span><span class="params">()</span> *<span class="title">Composite</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Composite&#123;</span><br><span class="line">childs: <span class="built_in">make</span>([]Component, <span class="number">0</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">AddChild</span><span class="params">(child Component)</span></span> &#123;</span><br><span class="line">child.SetParent(c)</span><br><span class="line">c.childs = <span class="built_in">append</span>(c.childs, child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">Print</span><span class="params">(pre <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s+%s\n"</span>, pre, c.Name())</span><br><span class="line">pre += <span class="string">" "</span></span><br><span class="line"><span class="keyword">for</span> _, comp := <span class="keyword">range</span> c.childs &#123;</span><br><span class="line">comp.Print(pre)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> composite</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleComposite</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := NewComponent(CompositeNode, <span class="string">"root"</span>)</span><br><span class="line">c1 := NewComponent(CompositeNode, <span class="string">"c1"</span>)</span><br><span class="line">c2 := NewComponent(CompositeNode, <span class="string">"c2"</span>)</span><br><span class="line">c3 := NewComponent(CompositeNode, <span class="string">"c3"</span>)</span><br><span class="line"></span><br><span class="line">l1 := NewComponent(LeafNode, <span class="string">"l1"</span>)</span><br><span class="line">l2 := NewComponent(LeafNode, <span class="string">"l2"</span>)</span><br><span class="line">l3 := NewComponent(LeafNode, <span class="string">"l3"</span>)</span><br><span class="line"></span><br><span class="line">root.AddChild(c1)</span><br><span class="line">root.AddChild(c2)</span><br><span class="line">c1.AddChild(c3)</span><br><span class="line">c1.AddChild(l1)</span><br><span class="line">c2.AddChild(l2)</span><br><span class="line">c2.AddChild(l3)</span><br><span class="line"></span><br><span class="line">root.Print(<span class="string">""</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// +root</span></span><br><span class="line"><span class="comment">//  +c1</span></span><br><span class="line"><span class="comment">//   +c3</span></span><br><span class="line"><span class="comment">//   -l1</span></span><br><span class="line"><span class="comment">//  +c2</span></span><br><span class="line"><span class="comment">//   -l2</span></span><br><span class="line"><span class="comment">//   -l3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>可以利用多态和递归机制更方便地使用复杂树结构。</li><li><em>开闭原则</em>。 无需更改现有代码， 就可以在应用中添加新元素， 使其成为对象树的一部分</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/composite" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/composite</a></li><li><a href="https://lailin.xyz/post/composite.html" target="_blank" rel="noopener">https://lailin.xyz/post/composite.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;组合模式&lt;/strong&gt;是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们&lt;/p&gt;
&lt;h3 id=&quot;实现代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实现代码&quot;&gt;&lt;/a&gt; 实现代码
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T08:44:02.726Z</updated>
    
    <content type="html"><![CDATA[<p><strong>观察者模式</strong>是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个“观察” 该对象的其他对象</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">type</span> Subject <span class="keyword">struct</span> &#123;</span><br><span class="line">observers []Observer<span class="comment">//观察者</span></span><br><span class="line">context   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSubject</span><span class="params">()</span> *<span class="title">Subject</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Subject&#123;</span><br><span class="line">observers: <span class="built_in">make</span>([]Observer, <span class="number">0</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Subject)</span> <span class="title">Attach</span><span class="params">(o Observer)</span></span> &#123;</span><br><span class="line">s.observers = <span class="built_in">append</span>(s.observers, o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Subject)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, o := <span class="keyword">range</span> s.observers &#123;</span><br><span class="line">o.Update(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新上下文</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Subject)</span> <span class="title">UpdateContext</span><span class="params">(context <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">s.context = context</span><br><span class="line">s.notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅接口</span></span><br><span class="line"><span class="keyword">type</span> Observer <span class="keyword">interface</span> &#123;</span><br><span class="line">Update(*Subject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">Reader</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Reader&#123;</span><br><span class="line">name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">Update</span><span class="params">(s *Subject)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s receive %s\n"</span>, r.name, s.context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleObserver</span><span class="params">()</span></span> &#123;</span><br><span class="line">subject := NewSubject()</span><br><span class="line">reader1 := NewReader(<span class="string">"reader1"</span>)</span><br><span class="line">reader2 := NewReader(<span class="string">"reader2"</span>)</span><br><span class="line">reader3 := NewReader(<span class="string">"reader3"</span>)</span><br><span class="line">subject.Attach(reader1)</span><br><span class="line">subject.Attach(reader2)</span><br><span class="line">subject.Attach(reader3)</span><br><span class="line"></span><br><span class="line">subject.UpdateContext(<span class="string">"observer mode"</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// reader1 receive observer mode</span></span><br><span class="line"><span class="comment">// reader2 receive observer mode</span></span><br><span class="line"><span class="comment">// reader3 receive observer mode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>当一个对象状态的改变需要改变其他对象，或实际对象是事先未知的或动态变化的时</li><li>当应用中的一些对象必须观察其他对象时，但仅能在有限时间内或特定情况下使用</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>开闭原则</em>。 <strong>无需修改发布者代码就能引入新的订阅者类</strong> (如果是发布者接口则可轻松引入发布者类)，<code>channel</code> 也存在类似功能。</li><li>可以在运行时建立对象之间的联系。</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/observer" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/observer</a></li><li><a href="https://lailin.xyz/post/observer.html" target="_blank" rel="noopener">https://lailin.xyz/post/observer.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt;是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个“观察” 该对象的其他对象&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码实现&quot;&gt;&lt;/a&gt; 代
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-装饰模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T06:04:06.085Z</updated>
    
    <content type="html"><![CDATA[<p><strong>装饰模式</strong>是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。</p><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3><p>更改一个对象的行为时，不能忽视继承可能引发的几个严重问题</p><ul><li>继承是静态的。 无法在运行时更改已有对象的行为， 只能使用由不同子类创建的对象替代当前的整个对象。</li><li>子类只能有一个父类。 大部分编程语言不允许一个类同时继承多个类的行为</li></ul><p>装饰模式使用对象组合的方式动态改变或增加对象行为，Go语言借助于匿名组合和非入侵式接口可以很方便实现装饰模式。使用匿名组合，在装饰器中不必显式定义转调原对象方法</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line">Calc() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的组件</span></span><br><span class="line"><span class="keyword">type</span> ConcreteComponent <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*ConcreteComponent)</span> <span class="title">Calc</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法装饰</span></span><br><span class="line"><span class="keyword">type</span> MulDecorator <span class="keyword">struct</span> &#123;</span><br><span class="line">Component</span><br><span class="line">num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WarpMulDecorator</span><span class="params">(c Component, num <span class="keyword">int</span>)</span> <span class="title">Component</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MulDecorator&#123;</span><br><span class="line">Component: c,</span><br><span class="line">num:       num,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法装饰实现接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *MulDecorator)</span> <span class="title">Calc</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> d.Component.Calc() * d.num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法装饰</span></span><br><span class="line"><span class="keyword">type</span> AddDecorator <span class="keyword">struct</span> &#123;</span><br><span class="line">Component</span><br><span class="line">num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WarpAddDecorator</span><span class="params">(c Component, num <span class="keyword">int</span>)</span> <span class="title">Component</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;AddDecorator&#123;</span><br><span class="line">Component: c,</span><br><span class="line">num:       num,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现相同的接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *AddDecorator)</span> <span class="title">Calc</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> d.Component.Calc() + d.num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleDecorator</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c Component = &amp;ConcreteComponent&#123;&#125;</span><br><span class="line">c = WarpAddDecorator(c, <span class="number">10</span>)</span><br><span class="line">c = WarpMulDecorator(c, <span class="number">8</span>)</span><br><span class="line">res := c.Calc()</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"res %d\n"</span>, res)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// res 80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>如果希望在无需修改代码的情况下即可使用对象，且希望在运行时为对象新增额外的行为，可以使用装饰模式</li><li>如果用继承来扩展对象行为的方案难以实现或者根本不可行，你可以使用该模式</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>无需创建新子类即可扩展对象的行为。</li><li>可以在运行时添加或删除对象的功能。</li><li>可以用多个装饰封装对象来组合几种行为。</li><li><em>单一职责原则</em>。 可以将实现了许多不同行为的一个大类拆分为多个较小的类</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/decorator" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/decorator</a></li><li><a href="https://lailin.xyz/post/decorator.html" target="_blank" rel="noopener">https://lailin.xyz/post/decorator.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;装饰模式&lt;/strong&gt;是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题描述&quot;&gt;&lt;/a&gt; 问题描述
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-职责链模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T07:26:20.563Z</updated>
    
    <content type="html"><![CDATA[<p><strong>责任链模式</strong>是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chain</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">interface</span> &#123;</span><br><span class="line">HaveRight(money <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">HandleFeeRequest(name <span class="keyword">string</span>, money <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestChain <span class="keyword">struct</span> &#123;</span><br><span class="line">Manager</span><br><span class="line">successor *RequestChain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestChain)</span> <span class="title">SetSuccessor</span><span class="params">(m *RequestChain)</span></span> &#123;</span><br><span class="line">r.successor = m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestChain)</span> <span class="title">HandleFeeRequest</span><span class="params">(name <span class="keyword">string</span>, money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Manager.HaveRight(money) &#123;</span><br><span class="line"><span class="keyword">return</span> r.Manager.HandleFeeRequest(name, money)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> r.successor != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.successor.HandleFeeRequest(name, money)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestChain)</span> <span class="title">HaveRight</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------- ProjectManager -------------</span></span><br><span class="line"><span class="keyword">type</span> ProjectManager <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProjectManagerChain</span><span class="params">()</span> *<span class="title">RequestChain</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;RequestChain&#123;</span><br><span class="line">Manager: &amp;ProjectManager&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*ProjectManager)</span> <span class="title">HaveRight</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> money &lt; <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*ProjectManager)</span> <span class="title">HandleFeeRequest</span><span class="params">(name <span class="keyword">string</span>, money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"bob"</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Project manager permit %s %d fee request\n"</span>, name, money)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Project manager don't permit %s %d fee request\n"</span>, name, money)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------- DepManager ------------------</span></span><br><span class="line"><span class="keyword">type</span> DepManager <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDepManagerChain</span><span class="params">()</span> *<span class="title">RequestChain</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;RequestChain&#123;</span><br><span class="line">Manager: &amp;DepManager&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*DepManager)</span> <span class="title">HaveRight</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> money &lt; <span class="number">5000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*DepManager)</span> <span class="title">HandleFeeRequest</span><span class="params">(name <span class="keyword">string</span>, money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"tom"</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Dep manager permit %s %d fee request\n"</span>, name, money)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Dep manager don't permit %s %d fee request\n"</span>, name, money)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------- GeneralManager ------------------</span></span><br><span class="line"><span class="keyword">type</span> GeneralManager <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGeneralManagerChain</span><span class="params">()</span> *<span class="title">RequestChain</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;RequestChain&#123;</span><br><span class="line">Manager: &amp;GeneralManager&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*GeneralManager)</span> <span class="title">HaveRight</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*GeneralManager)</span> <span class="title">HandleFeeRequest</span><span class="params">(name <span class="keyword">string</span>, money <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"ada"</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"General manager permit %s %d fee request\n"</span>, name, money)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"General manager don't permit %s %d fee request\n"</span>, name, money)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleChain</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := NewProjectManagerChain()</span><br><span class="line">c2 := NewDepManagerChain()</span><br><span class="line">c3 := NewGeneralManagerChain()</span><br><span class="line"></span><br><span class="line">c1.SetSuccessor(c2)</span><br><span class="line">c2.SetSuccessor(c3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c Manager = c1</span><br><span class="line"></span><br><span class="line">c.HandleFeeRequest(<span class="string">"bob"</span>, <span class="number">400</span>)</span><br><span class="line">c.HandleFeeRequest(<span class="string">"tom"</span>, <span class="number">1400</span>)</span><br><span class="line">c.HandleFeeRequest(<span class="string">"ada"</span>, <span class="number">10000</span>)</span><br><span class="line">c.HandleFeeRequest(<span class="string">"floar"</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Project manager permit bob 400 fee request</span></span><br><span class="line"><span class="comment">// Dep manager permit tom 1400 fee request</span></span><br><span class="line"><span class="comment">// General manager permit ada 10000 fee request</span></span><br><span class="line"><span class="comment">// Project manager don't permit floar 400 fee request</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种责任链的方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> check <span class="keyword">struct</span> &#123;</span><br><span class="line">err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c check)</span> <span class="title">checkName</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">check</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.err != <span class="literal">nil</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">len</span>(name) &lt; <span class="number">0</span> &#123;</span><br><span class="line"> c.err = errors.New(<span class="string">"name length wrong"</span>)</span><br><span class="line"> <span class="keyword">return</span> c</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> check&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c check)</span> <span class="title">checkAge</span><span class="params">(age <span class="keyword">uint8</span>)</span> <span class="title">check</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">200</span> &#123;</span><br><span class="line">c.err = errors.New(<span class="string">"age wrong"</span>)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> check&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := check&#123;&#125;</span><br><span class="line">c := c.checkName(<span class="string">"hello"</span>).checkAge(<span class="number">18</span>)</span><br><span class="line"><span class="keyword">if</span> c.err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>当程序需要使用不同方式处理不同种类请求，而且请求类型和顺序预先未知时</li><li>当必须按顺序执行多个处理者时</li><li>如果所需处理者及其顺序必须在运行时进行改变</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>可以控制请求处理的顺序</li><li><em>单一职责原则</em>。 可对发起操作和执行操作的类进行解耦</li><li><em>开闭原则</em>。 可以在不更改现有代码的情况下在程序中新增处理者</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/chain-of-responsibility</a></li><li><a href="https://lailin.xyz/post/chain.html" target="_blank" rel="noopener">https://lailin.xyz/post/chain.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;责任链模式&lt;/strong&gt;是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-解释器模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T09:58:57.363Z</updated>
    
    <content type="html"><![CDATA[<p><strong>解释器模式</strong>定义一套语言文法，并设计该语言解释器，使用户能使用特定文法控制解释器行为。解释器模式的意义在于，它分离多种复杂功能的实现，每个功能只需关注自身的解释。对于调用者不用关心内部的解释器的工作，只需要用简单的方式组合命令就可以</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> interpreter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点解释 接口</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">interface</span> &#123;</span><br><span class="line">Interpret() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">type</span> ValNode <span class="keyword">struct</span> &#123;</span><br><span class="line">val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *ValNode)</span> <span class="title">Interpret</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n.val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右节点</span></span><br><span class="line"><span class="keyword">type</span> AddNode <span class="keyword">struct</span> &#123;</span><br><span class="line">left, right Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右节点 解释器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *AddNode)</span> <span class="title">Interpret</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n.left.Interpret() + n.right.Interpret()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小节点</span></span><br><span class="line"><span class="keyword">type</span> MinNode <span class="keyword">struct</span> &#123;</span><br><span class="line">left, right Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小节点解释器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *MinNode)</span> <span class="title">Interpret</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n.left.Interpret() - n.right.Interpret()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解释器</span></span><br><span class="line"><span class="keyword">type</span> Parser <span class="keyword">struct</span> &#123;</span><br><span class="line">exp   []<span class="keyword">string</span></span><br><span class="line">index <span class="keyword">int</span></span><br><span class="line">prev  Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span> <span class="title">Parse</span><span class="params">(exp <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">p.exp = strings.Split(exp, <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> p.index &gt;= <span class="built_in">len</span>(p.exp) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> p.exp[p.index] &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">p.prev = p.newAddNode()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">p.prev = p.newMinNode()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">p.prev = p.newValNode()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span> <span class="title">newAddNode</span><span class="params">()</span> <span class="title">Node</span></span> &#123;</span><br><span class="line">p.index++</span><br><span class="line"><span class="keyword">return</span> &amp;AddNode&#123;</span><br><span class="line">left:  p.prev,</span><br><span class="line">right: p.newValNode(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span> <span class="title">newMinNode</span><span class="params">()</span> <span class="title">Node</span></span> &#123;</span><br><span class="line">p.index++</span><br><span class="line"><span class="keyword">return</span> &amp;MinNode&#123;</span><br><span class="line">left:  p.prev,</span><br><span class="line">right: p.newValNode(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span> <span class="title">newValNode</span><span class="params">()</span> <span class="title">Node</span></span> &#123;</span><br><span class="line">v, _ := strconv.Atoi(p.exp[p.index])</span><br><span class="line">p.index++</span><br><span class="line"><span class="keyword">return</span> &amp;ValNode&#123;</span><br><span class="line">val: v,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span> <span class="title">Result</span><span class="params">()</span> <span class="title">Node</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> interpreter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInterpreter</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">p := &amp;Parser&#123;&#125;</span><br><span class="line">p.Parse(<span class="string">"1 + 2 + 3 - 4 + 5 - 6"</span>)</span><br><span class="line">res := p.Result().Interpret()</span><br><span class="line">expect := <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> res != expect &#123;</span><br><span class="line">t.Fatalf(<span class="string">"expect %d got %d"</span>, expect, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景</h3><ol><li>自定义实现一个自定义接口告警规则功能</li></ol><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://lailin.xyz/post/interpreter.html" target="_blank" rel="noopener">https://lailin.xyz/post/interpreter.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;解释器模式&lt;/strong&gt;定义一套语言文法，并设计该语言解释器，使用户能使用特定文法控制解释器行为。解释器模式的意义在于，它分离多种复杂功能的实现，每个功能只需关注自身的解释。对于调用者不用关心内部的解释器的工作，只需要用简单的方式组合命令就可以&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T06:15:31.535Z</updated>
    
    <content type="html"><![CDATA[<p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p><p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后， 被封装的对象甚至察觉不到适配器的存在。 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：</p><ol><li>适配器实现与其中一个现有对象兼容的接口。</li><li>现有对象可以使用该接口安全地调用适配器方法。</li><li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象</li></ol><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter</span><br><span class="line"></span><br><span class="line"><span class="comment">//Target 是适配的目标接口</span></span><br><span class="line"><span class="keyword">type</span> Target <span class="keyword">interface</span> &#123;</span><br><span class="line">Request() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adaptee 是被适配的目标接口</span></span><br><span class="line"><span class="keyword">type</span> Adaptee <span class="keyword">interface</span> &#123;</span><br><span class="line">SpecificRequest() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NewAdaptee 是被适配接口的工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAdaptee</span><span class="params">()</span> <span class="title">Adaptee</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;adapteeImpl&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AdapteeImpl 是被适配的目标类</span></span><br><span class="line"><span class="keyword">type</span> adapteeImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SpecificRequest 是目标类的一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*adapteeImpl)</span> <span class="title">SpecificRequest</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"adaptee method"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NewAdapter 是Adapter的工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAdapter</span><span class="params">(adaptee Adaptee)</span> <span class="title">Target</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;adapter&#123;</span><br><span class="line">Adaptee: adaptee,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adapter 是转换Adaptee为Target接口的适配器</span></span><br><span class="line"><span class="keyword">type</span> adapter <span class="keyword">struct</span> &#123;</span><br><span class="line">Adaptee</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Request 实现Target接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *adapter)</span> <span class="title">Request</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.SpecificRequest()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expect = <span class="string">"adaptee method"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdapter</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">adaptee := NewAdaptee()</span><br><span class="line">target := NewAdapter(adaptee)</span><br><span class="line">res := target.Request()</span><br><span class="line"><span class="keyword">if</span> res != expect &#123;</span><br><span class="line">t.Fatalf(<span class="string">"expect: %s, actual: %s"</span>, expect, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>当你希望使用某个类，但是其接口与其他代码不兼容时，可以使用适配器类</li><li>如果您需要复用这样一些类，他们处于同一个继承体系，并且他们又有了额外的一些共同的方法，但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>单一职责原则</em>你可以将接口或数据转换代码从程序主要业务逻辑中分离。</li><li><em>开闭原则</em>。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://lailin.xyz/post/adapter.html" target="_blank" rel="noopener">https://lailin.xyz/post/adapter.html</a></li><li><a href="https://refactoringguru.cn/design-patterns/adapter" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/adapter</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;适配器模式&lt;/strong&gt;是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。&lt;/p&gt;
&lt;p&gt;适配器模式通过封装对象将复杂的转换过程隐藏于幕后， 被封装的对象甚至察觉不到适配器的存在。 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：&lt;
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-迭代器模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T07:51:26.268Z</updated>
    
    <content type="html"><![CDATA[<p><strong>迭代器模式</strong>是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//聚合</span></span><br><span class="line"><span class="keyword">type</span> Aggregate <span class="keyword">interface</span> &#123;</span><br><span class="line">Iterator() Iterator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">interface</span> &#123;</span><br><span class="line">First()<span class="comment">//第一个</span></span><br><span class="line">IsDone() <span class="keyword">bool</span><span class="comment">//是否结束</span></span><br><span class="line">Next() <span class="keyword">interface</span>&#123;&#125;<span class="comment">//下一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数量</span></span><br><span class="line"><span class="keyword">type</span> Numbers <span class="keyword">struct</span> &#123;</span><br><span class="line">start, end <span class="keyword">int</span><span class="comment">//开始与结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewNumbers</span><span class="params">(start, end <span class="keyword">int</span>)</span> *<span class="title">Numbers</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Numbers&#123;</span><br><span class="line">start: start,</span><br><span class="line">end:   end,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NumbersIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">numbers *Numbers</span><br><span class="line">next    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Numbers)</span> <span class="title">Iterator</span><span class="params">()</span> <span class="title">Iterator</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;NumbersIterator&#123;</span><br><span class="line">numbers: n,</span><br><span class="line">next:    n.start,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *NumbersIterator)</span> <span class="title">First</span><span class="params">()</span></span> &#123;</span><br><span class="line">i.next = i.numbers.start<span class="comment">//第一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否结束</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *NumbersIterator)</span> <span class="title">IsDone</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> i.next &gt; i.numbers.end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *NumbersIterator)</span> <span class="title">Next</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> !i.IsDone() &#123;</span><br><span class="line">next := i.next</span><br><span class="line">i.next++</span><br><span class="line"><span class="keyword">return</span> next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IteratorPrint</span><span class="params">(i Iterator)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i.First(); !i.IsDone(); &#123;</span><br><span class="line">c := i.Next()</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleIterator</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> aggregate Aggregate</span><br><span class="line">aggregate = NewNumbers(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">IteratorPrint(aggregate.Iterator())</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>集合背后为复杂的数据结构且希望对客户端隐藏其复杂性时</li><li>使用该模式可以减少程序中重复的遍历代码</li><li>希望代码能够遍历不同的甚至是无法预知的数据结构</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>单一职责原则</em>。 通过将体积庞大的遍历算法代码抽取为独立的类， 对客户端代码和集合进行整理。</li><li><em>开闭原则</em>。 可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码。</li><li>可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态。</li><li>相似的， 可以暂停遍历并在需要时继续。</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/iterator" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/iterator</a></li><li><a href="https://lailin.xyz/post/iterator.html" target="_blank" rel="noopener">https://lailin.xyz/post/iterator.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;迭代器模式&lt;/strong&gt;是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码实现&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-门面模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T06:40:52.908Z</updated>
    
    <content type="html"><![CDATA[<p>**门面模式(外观模式)**是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。</p><p>问题描述：假设必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下，需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。最终， 程序中类的业务逻辑将与第三方类的实现细节紧密耦合， 使得理解和维护代码的工作很难进行。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> facade</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAPI</span><span class="params">()</span> <span class="title">API</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;apiImpl&#123;</span><br><span class="line">a: NewAModuleAPI(),</span><br><span class="line">b: NewBModuleAPI(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//API is facade interface of facade package</span></span><br><span class="line"><span class="keyword">type</span> API <span class="keyword">interface</span> &#123;</span><br><span class="line">Test() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//facade implement</span></span><br><span class="line"><span class="keyword">type</span> apiImpl <span class="keyword">struct</span> &#123;</span><br><span class="line">a AModuleAPI</span><br><span class="line">b BModuleAPI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *apiImpl)</span> <span class="title">Test</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">aRet := a.a.TestA()</span><br><span class="line">bRet := a.b.TestB()</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s\n%s"</span>, aRet, bRet)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NewAModuleAPI return new AModuleAPI</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAModuleAPI</span><span class="params">()</span> <span class="title">AModuleAPI</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;aModuleImpl&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AModuleAPI ...</span></span><br><span class="line"><span class="keyword">type</span> AModuleAPI <span class="keyword">interface</span> &#123;</span><br><span class="line">TestA() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> aModuleImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*aModuleImpl)</span> <span class="title">TestA</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"A module running"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NewBModuleAPI return new BModuleAPI</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBModuleAPI</span><span class="params">()</span> <span class="title">BModuleAPI</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;bModuleImpl&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BModuleAPI ...</span></span><br><span class="line"><span class="keyword">type</span> BModuleAPI <span class="keyword">interface</span> &#123;</span><br><span class="line">TestB() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> bModuleImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*bModuleImpl)</span> <span class="title">TestB</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"B module running"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> facade</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expect = <span class="string">"A module running\nB module running"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TestFacadeAPI ...</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFacadeAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">api := NewAPI()</span><br><span class="line">ret := api.Test()</span><br><span class="line"><span class="keyword">if</span> ret != expect &#123;</span><br><span class="line">t.Fatalf(<span class="string">"expect %s, return %s"</span>, expect, ret)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>如果需要一个指向复杂子系统的直接接口，且该接口的功能有限，则可以使用外观模式</li><li>如果需要将子系统组织为多层结构，可以使用外观</li></ol><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/facade" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/facade</a></li><li><a href="https://lailin.xyz/post/facade.html" target="_blank" rel="noopener">https://lailin.xyz/post/facade.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;**门面模式(外观模式)**是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。&lt;/p&gt;
&lt;p&gt;问题描述：假设必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下，需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。最终， 
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-访问者模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.933Z</published>
    <updated>2022-08-14T09:32:12.309Z</updated>
    
    <content type="html"><![CDATA[<p><strong>访问者模式</strong>是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者 接口</span></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">interface</span> &#123;</span><br><span class="line">Accept(Visitor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问者 接口</span></span><br><span class="line"><span class="keyword">type</span> Visitor <span class="keyword">interface</span> &#123;</span><br><span class="line">Visit(Customer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//企业消费者</span></span><br><span class="line"><span class="keyword">type</span> EnterpriseCustomer <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者池</span></span><br><span class="line"><span class="keyword">type</span> CustomerCol <span class="keyword">struct</span> &#123;</span><br><span class="line">customers []Customer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加消费者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerCol)</span> <span class="title">Add</span><span class="params">(customer Customer)</span></span> &#123;</span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers, customer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收访问者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerCol)</span> <span class="title">Accept</span><span class="params">(visitor Visitor)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, customer := <span class="keyword">range</span> c.customers &#123;</span><br><span class="line">customer.Accept(visitor)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEnterpriseCustomer</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">EnterpriseCustomer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;EnterpriseCustomer&#123;</span><br><span class="line">name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *EnterpriseCustomer)</span> <span class="title">Accept</span><span class="params">(visitor Visitor)</span></span> &#123;</span><br><span class="line">visitor.Visit(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IndividualCustomer <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIndividualCustomer</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">IndividualCustomer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;IndividualCustomer&#123;</span><br><span class="line">name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *IndividualCustomer)</span> <span class="title">Accept</span><span class="params">(visitor Visitor)</span></span> &#123;</span><br><span class="line">visitor.Visit(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ServiceRequestVisitor <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*ServiceRequestVisitor)</span> <span class="title">Visit</span><span class="params">(customer Customer)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> c := customer.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *EnterpriseCustomer:</span><br><span class="line">fmt.Printf(<span class="string">"serving enterprise customer %s\n"</span>, c.name)</span><br><span class="line"><span class="keyword">case</span> *IndividualCustomer:</span><br><span class="line">fmt.Printf(<span class="string">"serving individual customer %s\n"</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only for enterprise</span></span><br><span class="line"><span class="keyword">type</span> AnalysisVisitor <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*AnalysisVisitor)</span> <span class="title">Visit</span><span class="params">(customer Customer)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> c := customer.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *EnterpriseCustomer:</span><br><span class="line">fmt.Printf(<span class="string">"analysis enterprise customer %s\n"</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleRequestVisitor</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := &amp;CustomerCol&#123;&#125;</span><br><span class="line">c.Add(NewEnterpriseCustomer(<span class="string">"A company"</span>))</span><br><span class="line">c.Add(NewEnterpriseCustomer(<span class="string">"B company"</span>))</span><br><span class="line">c.Add(NewIndividualCustomer(<span class="string">"bob"</span>))</span><br><span class="line">c.Accept(&amp;ServiceRequestVisitor&#123;&#125;)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// serving enterprise customer A company</span></span><br><span class="line"><span class="comment">// serving enterprise customer B company</span></span><br><span class="line"><span class="comment">// serving individual customer bob</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleAnalysis</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := &amp;CustomerCol&#123;&#125;</span><br><span class="line">c.Add(NewEnterpriseCustomer(<span class="string">"A company"</span>))</span><br><span class="line">c.Add(NewIndividualCustomer(<span class="string">"bob"</span>))</span><br><span class="line">c.Add(NewEnterpriseCustomer(<span class="string">"B company"</span>))</span><br><span class="line">c.Accept(&amp;AnalysisVisitor&#123;&#125;)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// analysis enterprise customer A company</span></span><br><span class="line"><span class="comment">// analysis enterprise customer B company</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ol><li>访问者模式通过在访问者对象中为多个目标类提供相同操作的变体， 让你能在属于不同类的一组对象上执行同一操作</li><li>该模式会将所有非主要的行为抽取到一组访问者类中， 使得程序的主要类能更专注于主要的工作</li><li>可将该行为抽取到单独的访问者类中， 只需实现接收相关类的对象作为参数的访问者方法并将其他方法留空即可。</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><em>开闭原则</em>。 可以引入在不同类对象上执行的新行为， 且无需对这些类做出修改。</li><li><em>单一职责原则</em>。 可将同一行为的不同版本移到同一个类中。</li><li>访问者对象可以在与各种对象交互时收集一些有用的信息。 当你想要遍历一些复杂的对象结构 （例如对象树）， 并在结构中的每个对象上应用访问者时， 这些信息可能会有所帮助</li></ul><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/visitor" target="_blank" rel="noopener">https://refactoringguru.cn/design-patterns/visitor</a></li><li><a href="https://lailin.xyz/post/visitor.html" target="_blank" rel="noopener">https://lailin.xyz/post/visitor.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;访问者模式&lt;/strong&gt;是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码实现&quot;&gt;&lt;/a&gt; 代码实现&lt;/h3&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xboom.github.io/2022/08/09/Design%20Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-09T15:30:38.932Z</published>
    <updated>2022-08-13T13:52:53.247Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原型模式</strong>是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类(<strong>亦称：</strong> 克隆、Clone、Prototype)</p><p>如果你有一个对象， 并希望生成与其完全相同的一个复制品， 你该如何实现呢？ 首先， 你必须新建一个属于相同类的对象。 然后， 你必须遍历原始对象的所有成员变量， 并将成员变量值复制到新对象中。</p><p>可能存在的问题</p><ol><li>并非所有对象都能通过这种方式进行复制， 因为有些对象可能拥有私有成员变量， 它们在对象本身以外是不可见的</li><li>有时只知道对象所实现的接口， 而不知道其所属的具体类， 比如可向方法的某个参数传入实现了某个接口的任何对象</li></ol><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> prototype</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keyword 搜索关键字</span></span><br><span class="line"><span class="keyword">type</span> Keyword <span class="keyword">struct</span> &#123;</span><br><span class="line">word      <span class="keyword">string</span><span class="comment">//私有</span></span><br><span class="line">visit     <span class="keyword">int</span><span class="comment">//私有</span></span><br><span class="line">UpdatedAt *time.Time <span class="comment">//公有</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clone 这里使用序列化与反序列化的方式深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *Keyword)</span> <span class="title">Clone</span><span class="params">()</span> *<span class="title">Keyword</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> newKeyword Keyword</span><br><span class="line">b, _ := json.Marshal(k)</span><br><span class="line">json.Unmarshal(b, &amp;newKeyword)</span><br><span class="line"><span class="keyword">return</span> &amp;newKeyword</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keywords 关键字 map</span></span><br><span class="line"><span class="keyword">type</span> Keywords <span class="keyword">map</span>[<span class="keyword">string</span>]*Keyword</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clone 复制一个新的 keywords</span></span><br><span class="line"><span class="comment">// updatedWords: 需要更新的关键词列表，由于从数据库中获取数据常常是数组的方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(words Keywords)</span> <span class="title">Clone</span><span class="params">(updatedWords []*Keyword)</span> <span class="title">Keywords</span></span> &#123;</span><br><span class="line">newKeywords := Keywords&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> words &#123;</span><br><span class="line"><span class="comment">// 这里是浅拷贝，直接拷贝了地址</span></span><br><span class="line">newKeywords[k] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换掉需要更新的字段，这里用的是深拷贝</span></span><br><span class="line"><span class="keyword">for</span> _, word := <span class="keyword">range</span> updatedWords &#123;</span><br><span class="line">newKeywords[word.word] = word.Clone()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newKeywords</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> prototype</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestKeywords_Clone</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">updateAt, _ := time.Parse(<span class="string">"2006"</span>, <span class="string">"2020"</span>)</span><br><span class="line">words := Keywords&#123;</span><br><span class="line"><span class="string">"testA"</span>: &amp;Keyword&#123;</span><br><span class="line">word:      <span class="string">"testA"</span>,</span><br><span class="line">visit:     <span class="number">1</span>,</span><br><span class="line">UpdatedAt: &amp;updateAt,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"testB"</span>: &amp;Keyword&#123;</span><br><span class="line">word:      <span class="string">"testB"</span>,</span><br><span class="line">visit:     <span class="number">2</span>,</span><br><span class="line">UpdatedAt: &amp;updateAt,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"testC"</span>: &amp;Keyword&#123;</span><br><span class="line">word:      <span class="string">"testC"</span>,</span><br><span class="line">visit:     <span class="number">3</span>,</span><br><span class="line">UpdatedAt: &amp;updateAt,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">now := time.Now()</span><br><span class="line">updatedWords := []*Keyword&#123;</span><br><span class="line">&#123;</span><br><span class="line">word:      <span class="string">"testB"</span>,</span><br><span class="line">visit:     <span class="number">10</span>,</span><br><span class="line">UpdatedAt: &amp;now,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">got := words.Clone(updatedWords)</span><br><span class="line"></span><br><span class="line">assert.Equal(t, words[<span class="string">"testA"</span>], got[<span class="string">"testA"</span>])</span><br><span class="line">assert.NotEqual(t, words[<span class="string">"testB"</span>], got[<span class="string">"testB"</span>])</span><br><span class="line">assert.NotEqual(t, updatedWords[<span class="number">0</span>], got[<span class="string">"testB"</span>])</span><br><span class="line">assert.Equal(t, words[<span class="string">"testC"</span>], got[<span class="string">"testC"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ol><li>适用于对象创建成本比较大需要经过复杂计算的情况</li></ol><h3 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h3><ol><li><a href="https://lailin.xyz/post/factory.html" target="_blank" rel="noopener">https://lailin.xyz/post/factory.html</a></li><li><a href="https://github.com/senghoo/golang-design-pattern" target="_blank" rel="noopener">https://github.com/senghoo/golang-design-pattern</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;原型模式&lt;/strong&gt;是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类(&lt;strong&gt;亦称：&lt;/strong&gt; 克隆、Clone、Prototype)&lt;/p&gt;
&lt;p&gt;如果你有一个对象， 并希望生成与其完全相同的一个复制品，
      
    
    </summary>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://xboom.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
</feed>
